---
# Configurate the control-plane node for the cluster.

- name: Cluster creation
  block:

  - name: Init cluster
    ansible.builtin.command:
      # As vagrant use the same private IP en every box fot the eth0, we use the that is part of our private network.
      cmd: kubeadm init --apiserver-advertise-address {{ hostvars[inventory_hostname]['ansible_host'] }} --pod-network-cidr={{ pod_network_cidr }}
      creates: /etc/kubernetes/admin.conf
    register: cluster_init
    tags:
      - bootstrap
      - kubernetes
      - control-plane

    # This task creates a new token in every run, because in case we need to add a new worker node to the cluster.
  - name: Create token for join command
    ansible.builtin.command:
      cmd: kubeadm token create --print-join-command
    register: cluster_create_token
    when: not cluster_init.changed
    changed_when:  false
    tags:
      - bootstrap
      - kubernetes
      - control-plane

  - set_fact:
      cluster_join_cmd_raw: "{{ cluster_init.stdout_lines[-2] ~ cluster_init.stdout_lines[-1] }}"
    when: cluster_init.changed
    tags:
      - bootstrap
      - kubernetes
      - control-plane

  - set_fact:
      cluster_join_cmd_raw: "{{ cluster_create_token.stdout }}"
    when: not cluster_init.changed
    tags:
      - bootstrap
      - kubernetes
      - control-plane

  - set_fact:
      cluster_join_cmd:
        host:  "{{ cluster_join_cmd_raw | regex_search('kubeadm join (?P<host>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}:[0-9]{4})', '\\g<host>') | first }}"
        token: "{{ cluster_join_cmd_raw | regex_search('--token (?P<token>[a-z0-9]{6}\\.[a-z0-9]{16})', '\\g<token>') | first }}"
        hash:  "{{ cluster_join_cmd_raw | regex_search('--discovery-token-ca-cert-hash (?P<hash>sha256:[a-z0-9]{64})', '\\g<hash>') | first }}"
    tags:
      - bootstrap
      - kubernetes
      - control-plane

- name: Install kubectl configuration
  block:
    # This is not entirely necessary, but it's nice to have this pointing to the actual configuration in case someone look for it.
    - name: Set configuration for the root user
      ansible.builtin.lineinfile:
        path: /root/.bashrc
        regexp: '^export KUBECONFIG='
        line: export KUBECONFIG=/root/.kube/config
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl

    - name: Create kube config directory for the root user
      ansible.builtin.file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: "0750"
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl

    - name: Set configuration for the root user
      ansible.builtin.copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: "0640"
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl

    - name: Create kube config directory for the admin user
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0750"
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl

    - name: Set configuration for the admin user
      ansible.builtin.copy:
        remote_src: yes
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0640"
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl

    - name: Set bash completion and aliases.
      ansible.builtin.blockinfile:
        path: "{{ item }}/.bashrc"
        block: |
          source <(kubectl completion bash)
          alias k=kubectl
          complete -o default -F __start_kubectl k
      loop:
        - /root/
        - "/home/{{ ansible_user }}"
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - kubectl


- name: Install Network Plugin
  block:
    - name: Create download directory
      ansible.builtin.file:
        path: /srv/data/projectcalico/calico/{{ calico_version }}/manifests/
        state: directory
        mode: '0755'
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - calico

    - name: Check if Calico is installed
      ansible.builtin.shell:
        cmd: kubectl get pods -n kube-system | grep -E 'calico-kube-controllers-[a-z0-9]{10}-[a-z0-9]{5}' | wc -l
      register: calico_installed
      changed_when: calico_installed.stdout|int == 0
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - calico

    - name: Download yaml definitions
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}//manifests/{{ item }}
        dest: /srv/data/projectcalico/calico/{{ calico_version }}//manifests/{{ item }}
        mode: '0440'
      loop:
        - calico.yaml
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - calico

    - name: Install the CNI Calico Pod Network Addon
      ansible.builtin.command:
        cmd: kubectl create --filename=/srv/data/projectcalico/calico/{{ calico_version }}//manifests/calico.yaml
      when: calico_installed.changed
      tags:
        - bootstrap
        - kubernetes
        - control-plane
        - calico
