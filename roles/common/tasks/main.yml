---
# Common configuration for all the nodes in the cluster.

- name: hostname configuration
  block:
    - name: set hostname
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
      tags:
        - bootstrap

    - name: Update hostname in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.2\s.*'
        line: '127.0.0.2	{{ inventory_hostname }}'
      tags:
        - bootstrap

    - name: Add cluster mappings to /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^{{ hostvars[item]['ansible_host'] }}"
        line: "{{ hostvars[item]['ansible_host'] }}	{{ hostvars[item]['inventory_hostname'] }}"
      loop: "{{ groups['all'] }}"
      tags:
        - bootstrap

# Apt sources
- name: Configure apt sources
  block:
    - name: apt sources | remove default sources.list
      ansible.builtin.file:
        path: /etc/apt/sources.list
        state: absent
      tags:
        - bootstrap

    - name: apt sources | enable main, contrib and non-free components on Debian
      ansible.builtin.apt_repository:
        repo: deb https://deb.debian.org/debian {{ item }} main contrib non-free
        state: present
        filename: main
      loop:
        - "{{ ansible_distribution_release }}"
        - "{{ ansible_distribution_release }}-updates"
        - "{{ ansible_distribution_release }}-backports"
      tags:
        - bootstrap
        - debian
      when:
        ansible_distribution == "Debian"

    - name: apt sources | enable main, contrib and non-free components for debian-security on Debian
      ansible.builtin.apt_repository:
        repo: deb https://deb.debian.org/debian-security/ {{ ansible_distribution_release }}-security main contrib non-free
        state: present
        filename: main
      tags:
        - bootstrap
        - debian
      when:
        ansible_distribution == "Debian"

    - name: Install bootstrap dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg

      tags:
        - bootstrap
        - dependencies

    # See README.md note ^2
    - name: Create the /etc/apt/keyrings directory if it does not exist
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      tags:
        - bootstrap
        - debian
        - ubuntu
        - debug
      when:
        (ansible_distribution == "Debian" and ansible_distribution_major_version|int < 12) or
        (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int < 22)


# containerd
- name: Configure and Install containerd from upstream (docker.com)
  block:
    - name: Containerd | Register dpkg architecture
      ansible.builtin.command: dpkg --print-architecture
      register: dpkg_architecture
      tags:
        - bootstrap
        - containerd

    - name: Containerd | Download and install gpg key
      ansible.builtin.shell:
        cmd: |
          curl -fsSL https://download.docker.com/linux/debian/gpg |\
          gpg --dearmor --output /etc/apt/keyrings/docker.gpg
        creates: /etc/apt/keyrings/docker.gpg
      tags:
        - bootstrap
        - containerd

    - name: Containerd | Add docker apt repository
      ansible.builtin.apt_repository:
        repo: deb [arch={{ dpkg_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower}} {{ ansible_distribution_release }} stable
        state: present
        filename: docker
      tags:
        - bootstrap
        - containerd

    - name: Containerd | Install containerd.io package
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        default_release: "{{ ansible_distribution_release }}"
      loop:
        - containerd.io
      tags:
        - bootstrap
        - containerd

  when:
    - install_containerd_from_upstream is true


- name: Containerd | Install containerd package
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop:
    - containerd
  tags:
    - bootstrap
    - containerd
  when:
    - install_containerd_from_upstream is false

# Note:
# 1. I'm intentionally not uninstalling any package manually in order to avoid conflicts, as I prefer to relay on Debian for do that.


- name: Enable IPv4 forwarding and let iptables see bridged traffic
  block:
  - name: Register a list of kernel modules to be loaded
    ansible.builtin.set_fact:
      kernel_modules:
        - overlay
        - br_netfilter
    tags:
      - bootstrap
      - kernel
      - k8s

  - name: Configure kernel modules to be loaded
    ansible.builtin.lineinfile:
      path: /etc/modules-load.d/k8s.conf
      create: true
      line: "{{ item }}"
    loop: "{{ kernel_modules }}"
    tags:
      - bootstrap
      - kernel
      - k8s

  - name: Load kernel modules
    ansible.builtin.command: "modprobe {{ item }}"
    loop: "{{ kernel_modules }}"
    tags:
      - bootstrap
      - kernel
      - k8s

  - name: Register a list of sysctl params required by setup
    ansible.builtin.set_fact:
      sysctl_parameters:
        net.bridge.bridge-nf-call-iptables: 1
        net.bridge.bridge-nf-call-ip6tables: 1
        net.ipv4.ip_forward: 1
    tags:
      - bootstrap
      - k8s
      - sysctl

  - name: Save sysctl params
    ansible.builtin.lineinfile:
      path: /etc/sysctl.d/k8s.conf
      create: true
      line: "{{ item.key }} = {{ item.value }}"
    loop: "{{ sysctl_parameters | dict2items }}"
    tags:
      - bootstrap
      - k8s
      - sysctl

  - name: Load sysctl params
    ansible.builtin.command: sysctl --system
    tags:
      - bootstrap
      - k8s
      - sysctl